CCS PCM C Compiler, Version 4.014, 35284               18-mar-10 00:26

               Filename: G:\red_i2c\esclavo1.lst

               ROM used: 204 words (2%)
                         Largest free fragment is 2048
               RAM used: 20 (5%) at main() level
                         24 (7%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   081
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.3
001C:  GOTO   01F
001D:  BTFSC  0C.3
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   042
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,PUT,NOBROWNOUT,NOLVP 
.................... #use delay(clock=4000000) 
*
006C:  MOVLW  2E
006D:  MOVWF  04
006E:  BCF    03.7
006F:  MOVF   00,W
0070:  BTFSC  03.2
0071:  GOTO   080
0072:  MOVLW  01
0073:  MOVWF  78
0074:  CLRF   77
0075:  DECFSZ 77,F
0076:  GOTO   075
0077:  DECFSZ 78,F
0078:  GOTO   074
0079:  MOVLW  4A
007A:  MOVWF  77
007B:  DECFSZ 77,F
007C:  GOTO   07B
007D:  GOTO   07E
007E:  DECFSZ 00,F
007F:  GOTO   072
0080:  RETLW  00
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    #locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    #locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_cycles(1); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_us(1); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_lcd(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_us(2); 
....................       lcd.enable = 0; 
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
....................       lcd.rs = address; 
....................       delay_cycles(1); 
....................       lcd.rw = 0; 
....................       delay_cycles(1); 
....................       lcd.enable = 0; 
....................       lcd_send_nibble(n >> 4); 
....................       lcd_send_nibble(n & 0xf); 
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
....................     lcd.rs = 0; 
....................     lcd.rw = 0; 
....................     lcd.enable = 0; 
....................     delay_ms(15); 
....................     for(i=1;i<=3;++i) { 
....................        lcd_send_nibble(3); 
....................        delay_ms(5); 
....................     } 
....................     lcd_send_nibble(2); 
....................     for(i=0;i<=3;++i) 
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
....................      address=lcd_line_two; 
....................    else 
....................      address=0; 
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
....................      case '\f'   : lcd_send_byte(0,1); 
....................                    delay_ms(2); 
....................                                            break; 
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
....................      default     : lcd_send_byte(1,c);     break; 
....................    } 
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #use i2c(SLAVE, SDA=PIN_C4, SCL=PIN_C3, ADDRESS=0XB0) 
*
0035:  MOVF   13,W
0036:  MOVF   31,W
0037:  MOVWF  13
0038:  BSF    14.4
0039:  BCF    0C.3
003A:  BSF    03.5
003B:  BTFSC  14.0
003C:  GOTO   03B
003D:  CLRF   78
003E:  BCF    03.5
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   067 (RETURN)
*
009A:  MOVLW  FF
009B:  BCF    03.5
009C:  MOVWF  28
.................... int flag =0; 
009D:  CLRF   29
.................... int dato; 
.................... byte incoming,state; 
....................  
.................... #INT_SSP 
.................... void ssp_interupt () 
.................... { 
.................... BYTE incoming, state; 
....................  
....................    state = i2c_isr_state(); 
*
0042:  BSF    03.5
0043:  BTFSC  14.5
0044:  GOTO   04A
0045:  BCF    03.5
0046:  CLRF   2D
0047:  BTFSC  13.0
0048:  BSF    2D.7
0049:  BSF    03.5
004A:  BCF    03.5
004B:  MOVF   2D,W
004C:  INCF   2D,F
004D:  MOVWF  30
*
009E:  MOVLW  03
009F:  MOVWF  2D
....................  
....................    if(state < 0x80)                     //Master is sending data 
*
004E:  MOVF   30,W
004F:  SUBLW  7F
0050:  BTFSS  03.0
0051:  GOTO   05E
....................    { 
....................       incoming = i2c_read(); 
0052:  BSF    03.5
0053:  BTFSS  14.0
0054:  GOTO   053
0055:  BCF    03.5
0056:  MOVF   13,W
0057:  MOVWF  2F
....................  
....................       if (incoming == 0x05){ 
0058:  MOVF   2F,W
0059:  SUBLW  05
005A:  BTFSS  03.2
005B:  GOTO   05E
....................  
....................          flag=1; 
005C:  MOVLW  01
005D:  MOVWF  29
....................          //output_b(255); 
....................  
....................  
....................       } 
....................  
....................  
....................    } 
....................    if((state == 0x80)&& (flag==1))                     //Master is requesting data 
005E:  MOVF   30,W
005F:  SUBLW  80
0060:  BTFSS  03.2
0061:  GOTO   068
0062:  DECFSZ 29,W
0063:  GOTO   068
....................    { 
....................       i2c_write(dato); 
0064:  MOVF   2A,W
0065:  MOVWF  31
0066:  GOTO   035
....................       flag=0; 
0067:  CLRF   29
....................    } 
.................... } 
....................  
....................  
....................  
....................  
0068:  BCF    0C.3
0069:  BCF    0A.3
006A:  BCF    0A.4
006B:  GOTO   01F
.................... void main (){ 
*
0081:  CLRF   04
0082:  BCF    03.7
0083:  MOVLW  1F
0084:  ANDWF  03,F
0085:  BSF    28.3
0086:  MOVF   28,W
0087:  BSF    03.5
0088:  MOVWF  07
0089:  BCF    03.5
008A:  BSF    28.4
008B:  MOVF   28,W
008C:  BSF    03.5
008D:  MOVWF  07
008E:  MOVLW  B0
008F:  MOVWF  13
0090:  MOVLW  36
0091:  BCF    03.5
0092:  MOVWF  14
0093:  BSF    03.5
0094:  BSF    1F.0
0095:  BSF    1F.1
0096:  BSF    1F.2
0097:  BCF    1F.3
0098:  MOVLW  07
0099:  MOVWF  1C
.................... enable_interrupts(GLOBAL); 
*
00A0:  MOVLW  C0
00A1:  IORWF  0B,F
.................... enable_interrupts(INT_SSP); 
00A2:  BSF    03.5
00A3:  BSF    0C.3
....................  
.................... setup_adc_ports (AN0); 
00A4:  BCF    1F.0
00A5:  BSF    1F.1
00A6:  BSF    1F.2
00A7:  BSF    1F.3
.................... setup_adc(ADC_CLOCK_INTERNAL ); 
00A8:  BCF    1F.6
00A9:  BCF    03.5
00AA:  BSF    1F.6
00AB:  BSF    1F.7
00AC:  BSF    03.5
00AD:  BCF    1F.7
00AE:  BCF    03.5
00AF:  BSF    1F.0
....................  
....................    output_b(0); 
00B0:  BSF    03.5
00B1:  CLRF   06
00B2:  BCF    03.5
00B3:  CLRF   06
....................  
.................... while (true){ 
.................... set_adc_channel(0); 
00B4:  MOVLW  00
00B5:  MOVWF  78
00B6:  MOVF   1F,W
00B7:  ANDLW  C7
00B8:  IORWF  78,W
00B9:  MOVWF  1F
.................... delay_ms(1); 
00BA:  MOVLW  01
00BB:  MOVWF  2E
00BC:  CALL   06C
.................... dato=read_adc(); 
00BD:  BSF    1F.2
00BE:  BTFSC  1F.2
00BF:  GOTO   0BE
00C0:  MOVF   1E,W
00C1:  MOVWF  2A
.................... delay_ms(1); 
00C2:  MOVLW  01
00C3:  MOVWF  2E
00C4:  CALL   06C
.................... output_b(dato); 
00C5:  BSF    03.5
00C6:  CLRF   06
00C7:  BCF    03.5
00C8:  MOVF   2A,W
00C9:  MOVWF  06
....................  
.................... } 
00CA:  GOTO   0B4
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
00CB:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
